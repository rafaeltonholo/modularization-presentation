plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "com.google.devtools.ksp" version "1.6.21-1.0.5"
}

apply from: "${rootDir}/compose_dependencies.gradle"
apply from: "${rootDir}/feature/dynamic_features_modules.gradle"

android {
    compileSdk versions.compileSdk

    defaultConfig {
        applicationId "dev.tonholo.awesomeapp.modularized.dfm"
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    buildTypes.each { type ->
        api_credentials.each { key, val ->
            type.buildConfigField "String", key, "\"$val\""
        }

        def bundleRootPath = "${rootDir}/app/build/outputs/bundle/${type.name}"
        def apksOutput = "$bundleRootPath/apks/app-${type.name}.apks"

        def buildTask = task(
            "${type.name}BuildApksForLocalTesting",
            type: JavaExec,
            group: "Play Feature Delivery",
        ) {
            description = "Build APKs for local testing under ${type.name} flavor"
            classpath = files("$rootDir/bundletool/bundletool.jar")
            args = [
                "build-apks",
                "--overwrite",
                "--local-testing",
                "--bundle",
                "$bundleRootPath/app-${type.name}.aab",
                "--output",
                apksOutput,
            ]
            dependsOn("bundle${type.name.capitalize()}")
        }

        task("${type.name}InstallApksForLocalTesting", type: JavaExec, group: "Play Feature Delivery",) {
            description = "Install APKs for local testing under ${type.name} flavor"
            classpath = files("$rootDir/bundletool/bundletool.jar")
            args = [
                "install-apks",
                "--apks",
                apksOutput,
            ]
            dependsOn(buildTask)
        }
    }
}

dependencies {
    implementation project(":base")

    // Add feature projects
    implementation project(":feature:camera")
    implementation project(":feature:imagedetail")
    implementation project(":feature:feed")

    implementation dep.androidx.core.ktx

    implementation dep.androidx.activity.compose

    implementation dep.hilt.android
    kapt dep.hilt.compiler

    implementation dep.coil.compose

    implementation dep.androidx.room.runtime
    implementation dep.androidx.room.ktx
    implementation dep.androidx.room.paging
    ksp dep.androidx.room.compiler

    testImplementation dep.junit
    androidTestImplementation dep.androidx.test.junit
    androidTestImplementation dep.androidx.test.espresso
    androidTestImplementation dep.androidx.test.composeUiTest
}
