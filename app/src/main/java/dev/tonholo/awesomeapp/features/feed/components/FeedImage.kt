package dev.tonholo.awesomeapp.features.feed.componentsimport android.content.res.Configurationimport androidx.compose.foundation.*import androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Favoriteimport androidx.compose.material.icons.filled.FavoriteBorderimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.ColorFilterimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport coil.compose.AsyncImageimport coil.request.ImageRequestimport dev.tonholo.awesomeapp.data.model.UnsplashImageimport dev.tonholo.awesomeapp.ui.theme.AwesomeAppThemeprivate const val ROUNDED_CORNER = 16/** * Represents a single entry of an Unsplash Image. This will render the image and also the copyrights of it. */@Composablefun FeedImage(    image: UnsplashImage,    modifier: Modifier = Modifier,    onClick: (UnsplashImage) -> Unit = {},    onFavClick: (UnsplashImage) -> Unit = {},) {    Box(        modifier = modifier            .background(MaterialTheme.colorScheme.surface, RoundedCornerShape(ROUNDED_CORNER.dp))            .size(350.dp)            .clickable { onClick(image) },    ) {        AsyncImage(            model = ImageRequest.Builder(LocalContext.current)                .data(image.urls?.small)                .crossfade(true)                .build(),            contentDescription = image.description,        )        Row(            modifier = Modifier                .fillMaxWidth()                .align(Alignment.BottomCenter)                .height(40.dp)                .background(                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),                    RoundedCornerShape(bottomEnd = ROUNDED_CORNER.dp, bottomStart = ROUNDED_CORNER.dp),                )                .padding(8.dp),            horizontalArrangement = Arrangement.SpaceBetween,            verticalAlignment = Alignment.CenterVertically        ) {            Text(                text = "Photo by ${image.user?.name} on Unsplash",                modifier = Modifier.weight(1f),                color = MaterialTheme.colorScheme.inverseOnSurface,            )            IconButton(                onClick = { onFavClick(image) },            ) {                Image(                    imageVector = if (image.likedByUser) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,                    contentDescription = "Like",                    colorFilter = ColorFilter.tint(Color.Red),                )            }        }    }}@Preview(    uiMode = Configuration.UI_MODE_NIGHT_NO,)@Composableprivate fun Preview() {    Preview(false)}@Preview(    uiMode = Configuration.UI_MODE_NIGHT_YES,)@Composableprivate fun DarkPreview() {    Preview(true)}@Composableprivate fun Preview(    darkMode: Boolean,) {    AwesomeAppTheme(darkTheme = darkMode) {        Column(            modifier = Modifier.verticalScroll(rememberScrollState())        ) {            repeat(10) {                val image = UnsplashImage(                    blurHash = "mock",                    color = "mock",                    createdAt = "mock",                    currentUserCollections = emptyList(),                    description = "mock",                    height = 1000,                    id = "mock",                    likedByUser = it % 2 == 0,                    likes = 100,                    links = null,                    updatedAt = "mock",                    urls = null,                    user = null,                    width = 1000,                )                FeedImage(                    image = image,                    modifier = Modifier.padding(8.dp)                )            }        }    }}